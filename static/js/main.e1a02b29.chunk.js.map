{"version":3,"sources":["serviceWorker.js","components/AppHeader.js","components/AppNavigation.js","components/LoadingEllipsis.js","components/AppShowList.js","components/AppShowDetails.js","index.js"],"names":["Boolean","window","location","hostname","match","withRouter","onSearchItem","pathname","className","type","id","onChange","placeholder","AppNavigation","LoadingEllipsis","AppShowList","props","shows","loading","onFetchShowDetails","length","map","show","to","onClick","key","rating","average","toFixed","src","image","medium","alt","name","genres","genre","i","AppShowDetails","details","onRouteToMain","history","useHistory","goBack","Object","keys","href","officialSite","language","status","premiered","runtime","schedule","days","sched","time","ReactHtmlParser","summary","App","state","showsRequestLoading","showDetails","showDetailsRequestLoading","searchItem","bind","fetchShowDetails","routeToMain","this","fetchShowList","exact","path","setState","axios","get","then","response","data","finally","event","value","currentTarget","showsRaw","forEach","showRaw","push","React","Component","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.e1a02b29.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport {\r\n  withRouter,\r\n} from 'react-router-dom';\r\nimport '../css/AppHeader.css';\r\n\r\nfunction AppHeader({ onSearchItem, location }) {\r\n  return (\r\n    <header>\r\n      {location.pathname === '/net-chill/' || location.pathname === '/net-chill' ?\r\n        <span className=\"search-wrapper\">\r\n          <i className=\"fas fa-search\"></i>\r\n          <input type=\"text\" id=\"searchInput\"\r\n          onChange={onSearchItem} className=\"search-input\"\r\n          placeholder=\"Search...\" />\r\n        </span> : null}\r\n    </header>\r\n  );\r\n}\r\n\r\nexport default withRouter(AppHeader);\r\n","import React from 'react';\r\nimport '../css/AppNavigation.css';\r\n\r\nfunction AppNavigation() {\r\n  return (\r\n    <nav className=\"navigation\">\r\n      <i className=\"fas fa-home\"></i>\r\n      <i className=\"far fa-user\"></i>\r\n      <i className=\"fas fa-download\"></i>\r\n      <i className=\"fas fa-bars\"></i>\r\n    </nav>\r\n  );\r\n}\r\n\r\nexport default AppNavigation;\r\n","import React from 'react';\r\nimport '../css/LoadingEllipsis.css';\r\n\r\nfunction LoadingEllipsis() {\r\n  return (\r\n    <div className=\"lds-ellipsis\">\r\n      <div></div>\r\n      <div></div>\r\n      <div></div>\r\n      <div></div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default LoadingEllipsis;\r\n","import React from 'react';\r\nimport {\r\n  Link,\r\n} from 'react-router-dom';\r\n\r\nimport '../css/AppShowList.css';\r\nimport LoadingEllipsis from './LoadingEllipsis';\r\n\r\nfunction AppShowList(props) {\r\n  const { shows, loading, onFetchShowDetails } = props;\r\n\r\n  return (\r\n    <div className=\"list-wrapper\">\r\n      {loading ? <LoadingEllipsis /> :\r\n        !shows.length ?\r\n          <div className=\"no-data-available\">No data available.</div>\r\n          : shows.map((show) =>\r\n              <Link to={`/net-chill/details/${show.id}`}\r\n                onClick={() => onFetchShowDetails(show.id)}\r\n                key={show.id}\r\n                className=\"link-container\">\r\n                <div className=\"show\" key={show.id}>\r\n                  <span className=\"rating\">\r\n                    {displayRating(show.rating.average || 0)}\r\n                  </span>\r\n                  <img src={show.image ? show.image.medium || '' : ''}\r\n                    alt={show.name} className=\"thumbnail\" />\r\n                  <div className=\"details\">\r\n                    <div className=\"title\">\r\n                      {show.name}\r\n                    </div>\r\n                    <span className=\"genre\">\r\n                      {displayGenres(show.genres || [])}\r\n                    </span>\r\n                  </div>\r\n                </div>\r\n              </Link>\r\n            )}\r\n    </div>\r\n  );\r\n}\r\n\r\n/**\r\n * Convert rating to decimal for consistency.\r\n * @param {number} average Movie/Show rating.\r\n */\r\nfunction displayRating(average) {\r\n  return average.toFixed(1);\r\n}\r\n\r\n/**\r\n * Concatenate genres.\r\n * @param {Array} genres List of genres.\r\n */\r\nfunction displayGenres(genres) {\r\n  return genres.map((genre, i) => {\r\n    return genre.length === i + 1 ? genre : genre + ', ';\r\n  });\r\n}\r\n\r\nexport default AppShowList;\r\n","import React from 'react';\r\nimport { useHistory } from 'react-router-dom';\r\nimport ReactHtmlParser from 'react-html-parser';\r\n\r\nimport '../css/AppShowDetails.css';\r\nimport LoadingEllipsis from './LoadingEllipsis';\r\n\r\nfunction AppShowDetails({ details, loading, onRouteToMain }) {\r\n  const history = useHistory();\r\n\r\n  return (\r\n    loading ? <LoadingEllipsis />\r\n      : <div className=\"details\">\r\n          <span className=\"back-wrapper\" onClick={() => {\r\n            history.goBack();\r\n            onRouteToMain();\r\n            }}>\r\n            <i className=\"fas fa-chevron-left back\" />\r\n            Show List\r\n          </span>\r\n          {details && Object.keys(details).length ?\r\n            <div className=\"details-wrapper\">\r\n              <div className=\"left\">\r\n                <a href={details.officialSite}>\r\n                  <img src={details.image ? details.image.medium || '' : ''} alt={details.name} />\r\n                </a>\r\n              </div>\r\n              <div className=\"right\">\r\n                <span className=\"title\">\r\n                  {details.name}\r\n                  <span className=\"rating\">\r\n                    {displayRating(details.rating ? details.rating.average || 0 : 0)}\r\n                  </span>\r\n                </span>\r\n                <div className=\"genre\">{displayGenres(details.genres || [])}</div>\r\n                <div className=\"extra-details\">\r\n                  <div>Language: <span>{details.language}</span></div>\r\n                  <div>Status: <span>{details.status}</span></div>\r\n                  <div>Date Premiered: <span>{details.premiered}</span></div>\r\n                  <div>Type: <span>{details.type}</span></div>\r\n                  <div>Run time: <span>{details.runtime}</span></div>\r\n                  <div>Schedule:\r\n                    <span> {displaySchedule(details.schedule ? details.schedule.days || [] : [])}\r\n                    {details.schedule ? details.schedule.time || '-' : '-'}</span></div>\r\n                </div>\r\n                <div className=\"summary\">{ReactHtmlParser(details.summary)}</div>\r\n              </div>\r\n            </div>\r\n          : <div>No data available.</div>}\r\n        </div>\r\n  );\r\n}\r\n\r\n/**\r\n * Concatenate schedule days.\r\n * @param {Array} schedule\r\n */\r\n  function displaySchedule(schedule) {\r\n    return schedule.map((sched, i) => {\r\n      return sched.length === i + 1 ? sched : sched + ', ';\r\n    });\r\n  }\r\n\r\n/**\r\n * Convert rating to decimal for consistency.\r\n * @TODO Create a utility for this.\r\n * @param {number} average Movie/Show rating.\r\n */\r\nfunction displayRating(average) {\r\n  return average.toFixed(1);\r\n}\r\n\r\n/**\r\n * Concatenate genres.\r\n * @TODO Create a utility for this.\r\n * @param {Array} genres List of genres.\r\n */\r\nfunction displayGenres(genres) {\r\n  return genres.map((genre, i) => {\r\n    return genre.length === i + 1 ? genre : genre + ', ';\r\n  });\r\n}\r\n\r\nexport default AppShowDetails;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport {\r\n  BrowserRouter as Router,\r\n  Switch,\r\n  Route,\r\n} from 'react-router-dom';\r\nimport './css/index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport axios from 'axios';\r\n\r\nimport AppHeader from './components/AppHeader';\r\nimport AppNavigation from './components/AppNavigation';\r\nimport AppShowList from './components/AppShowList';\r\nimport AppShowDetails from './components/AppShowDetails';\r\n\r\nclass App extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      shows: [],\r\n      showsRequestLoading: false,\r\n      showDetails: {},\r\n      showDetailsRequestLoading: false,\r\n    };\r\n\r\n    this.searchItem = this.searchItem.bind(this);\r\n    this.fetchShowDetails = this.fetchShowDetails.bind(this);\r\n    this.routeToMain = this.routeToMain.bind(this);\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.fetchShowList();\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Router>\r\n        <AppHeader onSearchItem={this.searchItem} />\r\n        <main>\r\n          <Switch>\r\n            <Route exact path=\"/net-chill/\">\r\n              <AppShowList shows={this.state.shows}\r\n                loading={this.state.showsRequestLoading}\r\n                onFetchShowDetails={this.fetchShowDetails} />\r\n            </Route>\r\n\r\n            <Route path='/net-chill/details/:id'>\r\n              <AppShowDetails details={this.state.showDetails}\r\n                loading={this.state.showDetailsRequestLoading}\r\n                onRouteToMain={this.routeToMain} />\r\n            </Route>\r\n          </Switch>\r\n          <AppNavigation />\r\n        </main>\r\n      </Router>\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Fecth show list.\r\n   */\r\n  fetchShowList() {\r\n    this.setState({ showsRequestLoading: true });\r\n    // Enhancement: API should return only needed information\r\n    axios.get('https://api.tvmaze.com/shows')\r\n      .then(response => {\r\n        const shows = response.data;\r\n\r\n        this.setState({ shows });\r\n      }).finally(() => {\r\n        this.setState({ showsRequestLoading: false });\r\n      });\r\n  }\r\n\r\n  /**\r\n   * Fetch show details.\r\n   * @param {string} id Show ID.\r\n   */\r\n  fetchShowDetails(id) {\r\n    this.setState({ showDetailsRequestLoading: true });\r\n    axios.get(`https://api.tvmaze.com/shows/${id}`)\r\n      .then(response => {\r\n        const showDetails = response.data;\r\n        \r\n        this.setState({ showDetails });\r\n      }).finally(() => {\r\n        this.setState({ showDetailsRequestLoading: false });\r\n      });\r\n  }\r\n\r\n  /**\r\n   * Route back to main page.\r\n   */\r\n  routeToMain() {\r\n    this.fetchShowList();\r\n  }\r\n\r\n  /**\r\n   * Search for shows.\r\n   * @TODO Add Debounce to prevent too frequent API calls.\r\n   * @param {Object} event Event object.\r\n   */\r\n  searchItem(event) {\r\n    const { value } = event.currentTarget;\r\n\r\n    if (!value) {\r\n      this.fetchShowList();\r\n      \r\n      return;\r\n    };\r\n\r\n    this.setState({ showsRequestLoading: true });\r\n    axios.get(`https://api.tvmaze.com/search/shows?q=${value}`)\r\n     .then(response => {\r\n        const showsRaw = response.data;\r\n        const shows = [];\r\n\r\n        showsRaw.forEach((showRaw) => {\r\n          shows.push(showRaw.show);\r\n        });\r\n\r\n        this.setState({ shows });\r\n      }).finally(() => {\r\n        this.setState({ showsRequestLoading: false });\r\n      });\r\n   }\r\n}\r\n\r\nReactDOM.render(\r\n  <App />,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}