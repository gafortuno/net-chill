{"version":3,"sources":["serviceWorker.js","components/AppHeader.js","components/LoadingEllipsis.js","components/AppShowList.js","components/AppShowDetails.js","index.js"],"names":["Boolean","window","location","hostname","match","withRouter","onSearchItem","pathname","className","type","id","onChange","LoadingEllipsis","AppShowList","props","shows","loading","onFetchShowDetails","length","map","show","to","onClick","key","rating","average","toFixed","src","image","medium","alt","name","genres","genre","i","AppShowDetails","details","onRouteToMain","history","useHistory","goBack","Object","keys","href","officialSite","language","status","premiered","runtime","schedule","days","sched","time","ReactHtmlParser","summary","App","state","showsRequestLoading","showDetails","showDetailsRequestLoading","searchItem","bind","fetchShowDetails","routeToMain","this","fetchShowList","exact","path","setState","axios","get","then","response","data","finally","event","value","currentTarget","showsRaw","forEach","showRaw","push","React","Component","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.47d63bd8.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport {\r\n  withRouter,\r\n} from 'react-router-dom';\r\nimport '../css/AppHeader.css';\r\n\r\nfunction AppHeader({ onSearchItem, location }) {\r\n  return (\r\n    <header>\r\n      {location.pathname === '/' ?\r\n        <span className=\"search-wrapper\">\r\n          <i className=\"fas fa-search\"></i>\r\n          <input type=\"text\" id=\"searchInput\"\r\n          onChange={onSearchItem} className=\"search-input\" />\r\n        </span> : null}\r\n    </header>\r\n  );\r\n}\r\n\r\nexport default withRouter(AppHeader);\r\n","import React from 'react';\r\nimport '../css/LoadingEllipsis.css';\r\n\r\nfunction LoadingEllipsis() {\r\n  return (\r\n    <div className=\"lds-ellipsis\">\r\n      <div></div>\r\n      <div></div>\r\n      <div></div>\r\n      <div></div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default LoadingEllipsis;\r\n","import React from 'react';\r\nimport {\r\n  Link,\r\n} from 'react-router-dom';\r\n\r\nimport '../css/AppShowList.css';\r\nimport LoadingEllipsis from './LoadingEllipsis';\r\n\r\nfunction AppShowList(props) {\r\n  const { shows, loading, onFetchShowDetails } = props;\r\n\r\n  return (\r\n    <div className=\"list-wrapper\">\r\n      {loading ? <LoadingEllipsis /> :\r\n        !shows.length ?\r\n          <div className=\"no-data-available\">No data available.</div>\r\n          : shows.map((show) =>\r\n              <Link to={`/details/${show.id}`}\r\n                onClick={() => onFetchShowDetails(show.id)}\r\n                key={show.id}>\r\n                <div className=\"show\" key={show.id}>\r\n                  <span className=\"rating\">\r\n                    {displayRating(show.rating.average || 0)}\r\n                  </span>\r\n                  <img src={show.image ? show.image.medium || '' : ''}\r\n                    alt={show.name} className=\"thumbnail\" />\r\n                  <div className=\"details\">\r\n                    <div className=\"title\">\r\n                      {show.name}\r\n                    </div>\r\n                    <span className=\"genre\">\r\n                      {displayGenres(show.genres || [])}\r\n                    </span>\r\n                  </div>\r\n                </div>\r\n              </Link>\r\n            )}\r\n    </div>\r\n  );\r\n}\r\n\r\n/**\r\n * Convert rating to decimal for consistency.\r\n * @param {number} average Movie/Show rating.\r\n */\r\nfunction displayRating(average) {\r\n  return average.toFixed(1);\r\n}\r\n\r\n/**\r\n * Concatenate genres.\r\n * @param {Array} genres List of genres.\r\n */\r\nfunction displayGenres(genres) {\r\n  return genres.map((genre, i) => {\r\n    return genre.length === i + 1 ? genre : genre + ', ';\r\n  });\r\n}\r\n\r\nexport default AppShowList;\r\n","import React from 'react';\r\nimport { useHistory } from 'react-router-dom';\r\nimport ReactHtmlParser from 'react-html-parser';\r\n\r\nimport '../css/AppShowDetails.css';\r\nimport LoadingEllipsis from './LoadingEllipsis';\r\n\r\nfunction AppShowDetails({ details, loading, onRouteToMain }) {\r\n  const history = useHistory();\r\n\r\n  return (\r\n    loading ? <LoadingEllipsis />\r\n      : <div className=\"details\">\r\n          <span className=\"back-wrapper\" onClick={() => {\r\n            history.goBack();\r\n            onRouteToMain();\r\n            }}>\r\n            <i className=\"fas fa-chevron-left back\" />\r\n            Show List\r\n          </span>\r\n          {details && Object.keys(details).length ?\r\n            <div className=\"details-wrapper\">\r\n              <div className=\"left\">\r\n                <a href={details.officialSite}>\r\n                  <img src={details.image ? details.image.medium || '' : ''} alt={details.name} />\r\n                </a>\r\n              </div>\r\n              <div className=\"right\">\r\n                <span className=\"title\">\r\n                  {details.name}\r\n                  <span className=\"rating\">\r\n                    {displayRating(details.rating ? details.rating.average || 0 : 0)}\r\n                  </span>\r\n                </span>\r\n                <div className=\"genre\">{displayGenres(details.genres || [])}</div>\r\n                <div className=\"extra-details\">\r\n                  <div>Language: <span>{details.language}</span></div>\r\n                  <div>Status: <span>{details.status}</span></div>\r\n                  <div>Date Premiered: <span>{details.premiered}</span></div>\r\n                  <div>Type: <span>{details.type}</span></div>\r\n                  <div>Run time: <span>{details.runtime}</span></div>\r\n                  <div>Schedule:\r\n                    <span> {displaySchedule(details.schedule ? details.schedule.days || [] : [])}\r\n                    {details.schedule ? details.schedule.time || '-' : '-'}</span></div>\r\n                </div>\r\n                <div className=\"summary\">{ReactHtmlParser(details.summary)}</div>\r\n              </div>\r\n            </div>\r\n          : <div>No data available.</div>}\r\n        </div>\r\n  );\r\n}\r\n\r\n/**\r\n * Concatenate schedule days.\r\n * @param {Array} schedule\r\n */\r\n  function displaySchedule(schedule) {\r\n    return schedule.map((sched, i) => {\r\n      return sched.length === i + 1 ? sched : sched + ', ';\r\n    });\r\n  }\r\n\r\n/**\r\n * Convert rating to decimal for consistency.\r\n * @TODO Create a utility for this.\r\n * @param {number} average Movie/Show rating.\r\n */\r\nfunction displayRating(average) {\r\n  return average.toFixed(1);\r\n}\r\n\r\n/**\r\n * Concatenate genres.\r\n * @TODO Create a utility for this.\r\n * @param {Array} genres List of genres.\r\n */\r\nfunction displayGenres(genres) {\r\n  return genres.map((genre, i) => {\r\n    return genre.length === i + 1 ? genre : genre + ', ';\r\n  });\r\n}\r\n\r\nexport default AppShowDetails;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n} from 'react-router-dom';\nimport './css/index.css';\nimport * as serviceWorker from './serviceWorker';\nimport axios from 'axios';\n\nimport AppHeader from './components/AppHeader';\nimport AppShowList from './components/AppShowList';\nimport AppShowDetails from './components/AppShowDetails';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      shows: [],\n      showsRequestLoading: false,\n      showDetails: {},\n      showDetailsRequestLoading: false,\n    };\n\n    this.searchItem = this.searchItem.bind(this);\n    this.fetchShowDetails = this.fetchShowDetails.bind(this);\n    this.routeToMain = this.routeToMain.bind(this);\n  }\n\n  componentDidMount() {\n    this.fetchShowList();\n  }\n\n  render() {\n    return (\n      <Router>\n        <AppHeader onSearchItem={this.searchItem} />\n        <main>\n          <Switch>\n            <Route exact path=\"/\">\n              <AppShowList shows={this.state.shows}\n                loading={this.state.showsRequestLoading}\n                onFetchShowDetails={this.fetchShowDetails} />\n            </Route>\n\n            <Route path='/details/:id'>\n              <AppShowDetails details={this.state.showDetails}\n                loading={this.state.showDetailsRequestLoading}\n                onRouteToMain={this.routeToMain} />\n            </Route>\n          </Switch>\n        </main>\n      </Router>\n    );\n  }\n\n  /**\n   * Fecth show list.\n   */\n  fetchShowList() {\n    this.setState({ showsRequestLoading: true });\n    // Enhancement: API should return only needed information\n    axios.get('http://api.tvmaze.com/shows')\n      .then(response => {\n        const shows = response.data;\n\n        this.setState({ shows });\n      }).finally(() => {\n        this.setState({ showsRequestLoading: false });\n      });\n  }\n\n  /**\n   * Fetch show details.\n   * @param {string} id Show ID.\n   */\n  fetchShowDetails(id) {\n    this.setState({ showDetailsRequestLoading: true });\n    axios.get(`http://api.tvmaze.com/shows/${id}`)\n      .then(response => {\n        const showDetails = response.data;\n        \n        this.setState({ showDetails });\n      }).finally(() => {\n        this.setState({ showDetailsRequestLoading: false });\n      });\n  }\n\n  /**\n   * Route back to main page.\n   */\n  routeToMain() {\n    this.fetchShowList();\n  }\n\n  /**\n   * Search for shows.\n   * @TODO Add Debounce to prevent too frequent API calls.\n   * @param {Object} event Event object.\n   */\n  searchItem(event) {\n    const { value } = event.currentTarget;\n\n    if (!value) {\n      this.fetchShowList();\n      \n      return;\n    };\n\n    this.setState({ showsRequestLoading: true });\n    axios.get(`http://api.tvmaze.com/search/shows?q=${value}`)\n     .then(response => {\n        const showsRaw = response.data;\n        const shows = [];\n\n        showsRaw.forEach((showRaw) => {\n          shows.push(showRaw.show);\n        });\n\n        this.setState({ shows });\n      }).finally(() => {\n        this.setState({ showsRequestLoading: false });\n      });\n   }\n}\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}